


design issues with webui-v1
--------------------------------

==> state/model/ui-data is scattered across UI components
==> if same state is required in multiple components 
    either we should duplicate that state in components or we should pass via input properties
==> state & state-change logic & network/service calls 
    are tightly-coupled with UI components     
==> we cant re-use same components across diffent pages or applications
==> Unit-Testing is very difficult in components   


soln:

    ==> isolate state & state change logic & n/w-ing calls from UI components

    How ?

        way-1 : Flux pattern  ( from facebook )

               --> uni-directional data-flow b/w view & state/model        


----------------------------------------------------------

        Dan Abramov  
        
            ==> reducer + flux = redux library

         https://egghead.io/courses/fundamentals-of-redux-course-from-dan-abramov-bd5cc867
----------------------------------------------------------------


        why we need redux ?

            => to manage javascript's UI appln state effectively

----------------------------------------------------------------  



----------------------------------------------------------------
steps to use redux library
----------------------------------------------------------------



step-1 : identify ui application's state
----------------------------------------------------------------

    e.g e-shop ui appln
    -------------------
                
                - items
                - reviews
                - cart

                - user
                - orders
                - currentUser
                - loadingStatus


step-2 : identify force/action(s) that cause state change
----------------------------------------------------------------
 

    e.g e-shop ui appln
    -------------------

                - LOAD_ITEMS
                - SEARCH_ITEMS

                - LOAD_REVIEWS
                - ADD_NEW_REVIEW
                
                - BUY
                - QTY_CHANGE
                - CART_DELETE
                - CHECKOUT

                - LOGIN 
                - REQUEST_BEGIN
                - REQUEST_ERROR
                - REQUEST_SUCCES

                .......  

step-3: define reducer(s) , to process action(s)  i.e state change logic
----------------------------------------------------------------
            - itemsReducer(prevState,action) ==> newItemsState
            - reviewsReducer(prevState,action) ==> newReviewsState
            - cartReducer(prevState,action) ==> newCartState


step-4: combine all reducer(s) as rootReducer  
----------------------------------------------------------------


step-5: create 'store' with rootReducer and initialState
----------------------------------------------------------------



step-6: connect store with react components 
----------------------------------------------------------------

lib: react-redux

        way-1 : HOF
        way-2 : hooks ( ill choose this )

----------------------------------------------------------------

